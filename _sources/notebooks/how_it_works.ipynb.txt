{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How SpanMarker works\n",
    "[SpanMarker](https://github.com/tomaarsen/SpanMarkerNER) is an accessible yet powerful Python module for training Named Entity Recognition models. In this notebook, we'll go over the specific model details that make SpanMarker so powerful.\n",
    "\n",
    "The SpanMarker model is quite simple at a glance: no contrastive learning, just passing single sentences through a pretrained (BERT, RoBERTa, etc.) encoder and using a simple cross entropy loss of embeddings against labels to finetune the encoder. However, there are some notable ideas that set it apart. First of all, I want to mention that these ideas are inspired by [PL-Marker](https://arxiv.org/pdf/2109.06067v5.pdf)."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step by step example\n",
    "Consider the following example input sentence: `\"Tom is my name.\"`, which tokenizes to this using the standard RoBERTa tokenizer: \n",
    "\n",
    "$$\n",
    "\\begin{matrix}\n",
    "[0 & 1560 & 16 & 127 & 766 & 4 & 2]\n",
    "\\end{matrix}\n",
    "$$\n",
    "\n",
    "In addition to these tokens, we also have position IDs, which tells the RoBERTa encoder where in the text each of these tokens exist. In the above example, the position IDs are:\n",
    "\\begin{matrix}\n",
    "[2 & 3 & 4 & 5 & 6 & 7 & 8]\n",
    "\\end{matrix}\n",
    "\n",
    "For this example, we consider a maximum token length of 16 (note: this is unreasonably low, 256 or 512 would be more sensible in real scenarios). The SpanMarker codebase pads using 0's, so then the padded tokens (`input_ids`) are:\n",
    "\n",
    "\\begin{matrix}\n",
    "[0 & 1560 & 16 & 127 & 766 & 4 & 2 & 0 \\\\\n",
    "0 & 0 & 0 & 0 & 0 & 0 & 0 & 0]\n",
    "\\end{matrix}\n",
    "\n",
    "And the position IDs now become:\n",
    "\n",
    "\\begin{matrix}\n",
    "[2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\\\\n",
    "10 & 11 & 12 & 13 & 14 & 15 & 16 & 17]\n",
    "\\end{matrix}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
