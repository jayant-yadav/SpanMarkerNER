{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading & Inferencing with SpanMarker\n",
    "[SpanMarker](https://github.com/tomaarsen/SpanMarkerNER) is an accessible yet powerful Python module for training Named Entity Recognition models.\n",
    "\n",
    "In this short notebook, we'll have a look at how to load a SpanMarker model from the hub for inference. For a larger and more general tutorial on how to use SpanMarker, please have a look at the [Getting Started](getting_started.ipynb) notebook."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup\n",
    "First of all, the `span_marker` Python module needs to be installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%pip install span_marker"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading the Model\n",
    "We're going to load the [tomaarsen/span-marker-bert-base-fewnerd-fine-super](https://huggingface.co/tomaarsen/span-marker-bert-base-fewnerd-fine-super) model from the hub, which has previously been trained to 0.7020 Test F1 on the finegrained supervised [FewNERD](https://huggingface.co/datasets/DFKI-SLT/few-nerd) dataset. We use [SpanMarkerModel.from_pretrained](https://tomaarsen.github.io/SpanMarkerNER/api/span_marker.modeling.html#span_marker.modeling.SpanMarkerModel.from_pretrained) for this. Note that we place it on the GPU with `.cuda()`. If you're running this on Google Colab, be sure to set hardware accelerator to \"GPU\" in `Runtime` > `Change runtime type`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from span_marker import SpanMarkerModel\n",
    "\n",
    "model_name = \"tomaarsen/span-marker-bert-base-fewnerd-fine-super\"\n",
    "model = SpanMarkerModel.from_pretrained(model_name).cuda()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try the model out with some predictions. For this we can use the [model.predict](https://tomaarsen.github.io/SpanMarkerNER/api/span_marker.modeling.html#span_marker.modeling.SpanMarkerModel.predict) method, which accepts either:\n",
    "\n",
    "* A sentence as a string.\n",
    "* A tokenized sentence as a list of strings.\n",
    "* A list of sentences as a list of strings.\n",
    "* A list of tokenized sentences as a list of lists of strings.\n",
    "\n",
    "The method returns a list of dictionaries for each sentence, with the following keys:\n",
    "\n",
    "* `\"label\"`: The string label for the found entity.\n",
    "* `\"score\"`: The probability score indicating the model its confidence.\n",
    "* `\"span\"`: The entity span as a string.\n",
    "* `\"word_start_index\"` and `\"word_end_index\"`: Integers useful for indexing the entity from a tokenized sentence.\n",
    "* `\"char_start_index\"` and `\"char_end_index\"`: Integers useful for indexing the entity from a string sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Battle of Camulodunum => event-attack/battle/war/militaryconflict\n",
      "Quintus Petillius Cerialis => person-soldier\n",
      "Camulodunum => location-GPE\n",
      "Colchester => location-GPE\n",
      "\n",
      "Wellingborough => location-GPE\n",
      "Northamptonshire => location-GPE\n",
      "Victoria Junior School => organization-education\n",
      "Westfield Boys School => organization-education\n",
      "Sir Christopher Hatton School => organization-education\n",
      "\n",
      "Nintendo => organization-company\n",
      "Wii => product-other\n",
      "Wii Mini => product-other\n",
      "Wii U => product-other\n",
      "Wii U' => product-other\n",
      "\n",
      "Dorsa => person-other\n",
      "Bachelor of Music in Composition => other-educationaldegree\n",
      "California State University => organization-education\n",
      "Northridge => location-GPE\n",
      "Master of Music in Harpsichord Performance => other-educationaldegree\n",
      "Cal State Northridge => organization-education\n",
      "Doctor of Musical Arts => other-educationaldegree\n",
      "University of Michigan => organization-education\n",
      "Ann Arbor => location-GPE\n",
      "\n"
     ]
    }
   ],
   "source": [
    "sentences = [\n",
    "    \"The Ninth suffered a serious defeat at the Battle of Camulodunum under Quintus Petillius Cerialis in the rebellion of Boudica (61), when most of the foot-soldiers were killed in a disastrous attempt to relieve the besieged city of Camulodunum (Colchester).\",\n",
    "    \"He was born in Wellingborough, Northamptonshire, where he attended Victoria Junior School, Westfield Boys School and Sir Christopher Hatton School.\",\n",
    "    \"Nintendo continued to sell the revised Wii model and the Wii Mini alongside the Wii U during the Wii U's first release year.\",\n",
    "    \"Dorsa has a Bachelor of Music in Composition from California State University, Northridge in 2001, Master of Music in Harpsichord Performance at Cal State Northridge in 2004, and a Doctor of Musical Arts at the University of Michigan, Ann Arbor in 2008.\"\n",
    "]\n",
    "\n",
    "entities_per_sentence = model.predict(sentences)\n",
    "\n",
    "for entities in entities_per_sentence:\n",
    "    for entity in entities:\n",
    "        print(entity[\"span\"], \"=>\", entity[\"label\"])\n",
    "    print()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feel free to compare this to the [Getting Started](getting_started.ipynb) notebook, which trains a model using `bert-base-cased` on the simpler coarse-grained FewNERD."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "span-marker-ner",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "c231fc6d0de0df4a232423539031d78e3a72f0f8d848d7b948e520fe3bfbe8ca"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
